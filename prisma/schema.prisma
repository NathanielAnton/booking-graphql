// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CLIENT
  INTERVENANT
  ADMIN
}

enum EventStatus {
  PLANNED
  CANCELLED
  DONE
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

model User {
  id          Int          @id @default(autoincrement())
  firstName   String
  lastName    String
  email       String       @unique
  role        Role         @default(CLIENT)
  createdAt   DateTime     @default(now())
  availabilities Availability[]
  events      Event[]      
  serviceOfferings  ServiceOffering[]
  bookingsAsClient Booking[] @relation("clientBookings", fields: [], references: [])
  bookingsAsIntervenant Booking[] @relation("intervenantBookings", fields: [], references: [])
}

model Availability {
  id            Int      @id @default(autoincrement())
  intervenant   User     @relation(fields: [intervenantId], references: [id])
  intervenantId Int
  dayOfWeek     Int      // 0-6 (lundi=0 ou selon toi)
  startTime     String   // "08:00"
  endTime       String   // "12:00"
  isAvailable   Boolean  @default(true)
  bookings      Booking[]
}

model Event {
  id            Int       @id @default(autoincrement())
  intervenant   User      @relation(fields: [intervenantId], references: [id])
  intervenantId Int
  title         String
  description   String?
  startDate     DateTime
  endDate       DateTime
  location      String?
  status        EventStatus @default(PLANNED)
  participants  Booking[]   // Bookings that reference this event
}

model Booking {
  id              Int          @id @default(autoincrement())
  client          User         @relation("clientBookings", fields: [clientId], references: [id])
  clientId        Int
  intervenant     User         @relation("intervenantBookings", fields: [intervenantId], references: [id])
  intervenantId   Int
  event           Event?       @relation(fields: [eventId], references: [id])
  eventId         Int?
  availability    Availability? @relation(fields: [availabilityId], references: [id])
  availabilityId  Int?
  status          BookingStatus @default(PENDING)
  createdAt       DateTime      @default(now())
}

model Service {
  id         Int     @id @default(autoincrement())
  name       String
  category   String?
  duration   Int     // minutes
  price      Float
  offerings  ServiceOffering[]
}

model ServiceOffering {
  id            Int     @id @default(autoincrement())
  service       Service @relation(fields: [serviceId], references: [id])
  serviceId     Int
  intervenant   User    @relation(fields: [intervenantId], references: [id])
  intervenantId Int
}
